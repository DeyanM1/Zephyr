{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Zephyr is a variable-based programming language designed for simplicity and efficiency. In Zephyr, all variables are lowercase, and the syntax is minimalistic, allowing you to define and manipulate variables, perform calculations, and structure your programs using loops, functions, and conditional logic.</p>"},{"location":"#vision-and-purpose","title":"Vision and Purpose","text":"<p>Welcome to the Zephyr project! My goal is to create the world's first variable-based programming language, designed to provide an innovative and intuitive approach to understanding the inner workings of programming languages. This language is tailored for intermediate to professional developers who want to deepen their knowledge of how programming languages parse, compile, and execute code.</p>"},{"location":"#why-this-language","title":"Why This Language?","text":"<p>Programming languages often abstract away the low-level details of how they handle code, making it challenging for developers to fully grasp the mechanics of compilation and execution. With Zephyr, I aim to bridge this gap. By focusing on variables as a central concept, this language provides developers with a clear, hands-on perspective on how code is processed under the hood.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Variable-Centric Design: A unique syntax and structure that revolve around variables as the primary building blocks of code.</li> <li>Educational Focus: Ideal for developers who want to learn or teach the concepts of parsing and compiling in a practical way.</li> <li>Comprehensive Documentation: The language comes with detailed, beginner-friendly, and well-organized documentation to help users understand its syntax, features, and concepts thoroughly.</li> </ul>"},{"location":"#who-is-it-for","title":"Who Is It For?","text":"<p>This language is intended for:</p> <ul> <li>Intermediate developers who want to expand their understanding of programming language design.</li> <li>Experienced professionals exploring innovative ways to teach or experiment with compilation processes.</li> <li>Curious learners interested in diving deeper into how programming languages work behind the scenes.</li> </ul>"},{"location":"#start-writing-programs","title":"Start writing programs","text":""},{"location":"#see-documentation-here","title":"See documentation here","text":""},{"location":"#notes","title":"Notes","text":"<p>https://patorjk.com/software/taag/#p=display&amp;f=ANSI%20Shadow&amp;t=Zephyr%0A https://convertio.co/txt-png/</p>"},{"location":"BeginnerInfo/","title":"Begginer Info","text":""},{"location":"BeginnerInfo/#syntax-overview","title":"Syntax Overview","text":"<p>Basic Structure:</p> <pre><code>&lt;VariableName&gt; &lt;base&gt; &lt;function&gt;:&lt;Argument1&gt;|&lt;Argument2&gt;|...;\n&lt;--------------------------command-------------------------&gt;\n</code></pre> <ul> <li><code>VariableName</code>: The name of the variable, user-defined.</li> <li><code>base</code>: The base of the variable, used to define its operation:</li> <li><code>?</code>: For variable operations (e.g., modifying or retrieving values).</li> <li><code>#</code>: For declaring variables or changing their types.</li> <li><code>function</code>: The operation to execute on the variable (e.g., printing, defining a function).</li> <li><code>arguments</code>: Additional information passed to the function.</li> <li><code>command</code>: The entire statement.</li> </ul>"},{"location":"BeginnerInfo/#comments","title":"Comments","text":"<p>adding a <code>~</code> in a line all text after the character will be ignored.</p> <ul> <li>usage: <pre><code>a # PT:HelloWorld; ~ This is a comment\n~ This is also a comment\n</code></pre></li> </ul>"},{"location":"BeginnerInfo/#file-extensions","title":"File Extensions","text":"<ul> <li>.zph: Zephyr code file.</li> <li>.zsrc: Zephyr source file for debugging.</li> <li>.zpkg: Zephyr dumped variables file.</li> </ul>"},{"location":"BeginnerInfo/#run-a-file","title":"Run a File","text":"<ol> <li>Download the installer.bat from the releases tab or the dist library.</li> <li>run the installer as administrator</li> <li>run the command: <pre><code>zephyr compile -r &lt;filename&gt;\n</code></pre> run <code>--help</code> for more information</li> </ol>"},{"location":"BeginnerInfo/#error-handling","title":"Error Handling","text":""},{"location":"BeginnerInfo/#error-codes","title":"Error Codes:","text":"<ol> <li>[101] -&gt; Type doesn't have this function.</li> <li>[102] -&gt; Unknown variable.</li> <li>[103] -&gt; Keyboard interrupt</li> <li>[110] -&gt; Current type doesn't support new value or new type.</li> <li>[201] -&gt; Only PT type is pushable.</li> <li>[202] -&gt; Invalid positional value.</li> <li>[203] -&gt; Invalid return function.</li> <li>[204] -&gt; Invalid condition or RNG range.</li> <li>[205] -&gt; Unable to import library.</li> </ol> <p>Example Error Message: <pre><code>[110]: ERROR: {type} != {description} -&gt; unsupported type!\n{description} | {name} {base} {function}\n</code></pre></p>"},{"location":"Libraries/GPIO/","title":"GPIO-Library","text":"<ul> <li>usage: <pre><code>GPIO # LIB:GPIO; ~ import GPIO library\nGPIO # INIT:&lt;BoardMode&gt;; ~ BCM or BOARD\n\nGPIO ? SETUP:&lt;PIN&gt;|&lt;Mode&gt;; ~ IN or OUT\n\nGPIO ? SET:&lt;PIN&gt;|&lt;value&gt;; ~ LOW or HIGH\n</code></pre></li> <li> <p>write to Pins: <pre><code>GPIO # LIB:GPIO;\nGPIO # INIT:BCM;\n\nGPIO ? SETUP:4|OUT;\nGPIO ? SET:4|HIGH;\n</code></pre></p> </li> <li> <p>read from Pins: <pre><code>output # INT:0;\nGPIO # LIB:GPIO;\nGPIO # INIT:BCM;\n\nGPIO ? SETUP:4|IN;\nGPIO ? READ:4|output\n</code></pre></p> </li> </ul>"},{"location":"Types/00-Overview/","title":"Overview","text":""},{"location":"Types/00-Overview/#declaring-variables","title":"Declaring Variables","text":"<p>You declare a variable by giving it a name, a type, and an initial value.</p> <ul> <li> <p>usage: <pre><code>&lt;VariableName&gt; # &lt;Type&gt;:&lt;Value&gt;|&lt;Param1&gt;|&lt;Param2&gt;|...;\n</code></pre></p> </li> <li> <p><code>&lt;VariableName&gt;</code> -&gt; Name of the variable.</p> </li> <li><code>Type</code> -&gt; Data type of the variable (PT, INT, FLOAT).</li> <li><code>&lt;Value&gt;</code> -&gt; Data type of the variable (PT, INT, FLOAT).</li> <li><code>Value</code>: The initial value of the variable.</li> <li><code>Param</code>: Optional parameters; Multiple parameters can be added, separated by |.</li> </ul> <p>Examples:</p> <ul> <li>Declare an integer:   <pre><code>counter # INT:10;\n</code></pre></li> <li>Declare a constant text:   <pre><code>message # PT:\"Hello World\"|~1;\n</code></pre></li> </ul>"},{"location":"Types/00-Overview/#changing-type","title":"Changing Type","text":"<p>You can change the type of an existing variable with <code># CT:</code> operation. This resets the variable\u2019s value.</p> <ul> <li>usage: <pre><code>&lt;VariableName&gt; # CT:&lt;Type&gt;;\n</code></pre></li> <li><code>&lt;VariableName&gt;</code> -&gt; Name of the variable.</li> <li><code>Type</code>: The new variable type; Only compatible types can be changed to</li> </ul> <p>Example:</p> <ul> <li>Change type to Printable Text: <pre><code>counter # INT:5;\ncounter # CT:PT;   ~ counter is now a Printable Text variable\n</code></pre></li> </ul>"},{"location":"Types/01-simpleVariable/","title":"Simple Variables","text":"<p>Simple variables in Zephyr hold basic values. There are three types:</p> <ul> <li><code>PT</code>: Printable Text (strings of characters)</li> <li><code>INT</code>: Integer (whole numbers)</li> <li><code>FLOAT</code>: Floating-point number (decimal values)</li> </ul>"},{"location":"Types/01-simpleVariable/#pt-printable-text","title":"PT (Printable Text)","text":"<p>Represents a sequence of characters.</p> <ul> <li>usage: <pre><code>myText # PT:HelloWorld!~|0;\n</code></pre></li> <li>Parameters:</li> <li><code>|~0</code> \u2192 Marks the variable as non-constant (default).</li> <li><code>|~1</code> \u2192 Marks the variable as constant (value cannot change).</li> </ul>"},{"location":"Types/01-simpleVariable/#int-integer","title":"INT (Integer)","text":"<p>Represents whole numbers without decimals. - usage: <pre><code>myText # INT:123;\n</code></pre> - Valid Values: Positive or negative whole numbers (e.g., 0, 42, -99).</p>"},{"location":"Types/01-simpleVariable/#float-floating-point-number","title":"FLOAT (Floating-point Number)","text":"<p>Represents decimal values. - usage: <pre><code>myText # FLOAT:3.1415;\n</code></pre> - Valid Values: Positive or negative numbers with decimals (e.g., 0.0, -1.25, 99.999).</p>"},{"location":"Types/01-simpleVariable/#modifying-values","title":"Modifying Values","text":"<p>To modify variables, use the <code>? w:</code> operation.</p> <p>usage: <pre><code>&lt;VariableName&gt; ? w:&lt;Value&gt;;\n&lt;VariableName&gt; ? w:'&lt;AnotherVariableName&gt;';\n</code></pre> Parameters: - <code>&lt;VariableName&gt;</code> \u2192 Name of the variable you want to modify. - <code>VariableName</code> \u2192 Must match the variable\u2019s type. - <code>'AnotherVariableName'</code> \u2192 By entering any variable name inside ' ', its current value is copied.</p> <p>Example: <pre><code>a # INT:10;\nb # INT:0;\n\nb ? w:'a';   ~ b now holds the value of a \u2192 10\n</code></pre></p> <p>Incrementing:</p> <ul> <li>Increment integer or float by 1 (or 1.0)::   <pre><code>counter ? w:++;\n</code></pre></li> <li>Decrement integer or Float by 1 (or 1.0):   <pre><code>counter ? w:--;\n</code></pre></li> <li>Increment PT:   <pre><code>printableText # PT:HelloWorld;\nprintableText ? w:++;\n</code></pre>   printableText after increment: HelloWorldHelloWorld</li> </ul>"},{"location":"Types/02-buildInFunction/","title":"Built-in Functions","text":"<p>Zephyr comes with several built-in functions that can be used without prior definition.</p> <p>Example:</p> <p><pre><code>__ ? JUMP:&lt;Line&gt;;\n__ ? WAIT:&lt;Seconds&gt;;\n</code></pre> - <code>JUMP</code>: Jumps to a specific function, not a line. - <code>WAIT</code>: Wait for a specific amount of second. | INT Variable name support if in <code>' '</code> - <code>DUMPING VARIABLES</code>: see below</p>"},{"location":"Types/03-Lists/","title":"Lists","text":"<p>Lists are variables that hold multiple values of the same type. It will fill spaces between values with null values. Lists don't support type changes</p> <p>POS = 1 to +Inf NEG-POS = -1 to -Inf</p> <p>OptionalData from 1 to +Inf</p> <p>Supported types: Variables Declare a list:</p> <ul> <li>usage: <pre><code>~ define\nmyList # LIST:&lt;ElementsType&gt;|optionalData;\nmyList ? SET:&lt;pos&gt;|&lt;data&gt;;\nmyList ? SET:'myPosVar'|'myPosValue';\n\n~ read to supported types from a LIST\nmyNum # INT:0;\nmyNum ? w:'myList&lt;pos&gt;';\n</code></pre></li> <li>define <code>optionalData Syntax</code>: <code>..|5,1,5,2</code>  /  <code>..|test1,test2,test3</code> <code>pos</code>: can be from 1 to +Inf or from -1 to -Inf. | INT, LIST Variable name support if in <code>' '</code> <code>data</code>: can be any value which the type supports| PT, LIST Variable name support if in <code>' '</code></li> <li>read <code>pos</code> must be in <code>&lt; &gt;</code> variable name must be in <code>' '</code></li> </ul>"},{"location":"Types/03-Lists/#alist-coming-soon","title":"ALIST (Coming Soon)","text":"<p>A Allocated List is a list that does'nt fill spaces between values. It saves memory. The positioning Commands are like a normal List.</p>"},{"location":"Types/04-MathObjects/","title":"Math Objects","text":"<p>Math objects allow for complex calculations.</p> <p>Declare a Math Object:</p> <ul> <li>usage: <pre><code>&lt;VariableName&gt; # MO:;\n&lt;VariableName&gt; # MO:(&lt;equation&gt;);\n</code></pre></li> </ul> <p>Pass an Equation:</p> <ul> <li>usage: <pre><code>&lt;VariableName&gt; ? (&lt;equation&gt;):;\n</code></pre></li> <li>Equation Format: <code>(a + b)</code> where <code>a</code> and <code>b</code> are variables.</li> </ul> <p>Example:</p> <ul> <li>usage:</li> <li>Define and use a math object:   <pre><code>result # MO:;\nresult ? ('a' + 'b'):;\n</code></pre></li> </ul>"},{"location":"Types/05-Functions/","title":"Functions","text":"<p>Functions in Zephyr allow you to encapsulate an equation and reuse it.</p> <p>Declare a Function:</p> <ul> <li> <p>usage: <pre><code>&lt;VariableName&gt; # FUNC:&lt;returnType&gt;|(~1/~0);\n</code></pre></p> </li> <li> <p>Return Types: <code>RES</code> (Result); <code>VC</code> (Variable changable);</p> </li> <li>~ 1/~0: Indicates if the function's behavior changes based on external variable modifications.</li> <li>~ 1 Disables variable change!</li> </ul>"},{"location":"Types/05-Functions/#function-res","title":"Function RES","text":"<p>Pass an Equation to a Function:</p> <ul> <li>usage: <pre><code>&lt;VariableName&gt; ? (&lt;equation&gt;);\n</code></pre></li> </ul> <p>Call a Function:</p> <ul> <li>usage: <pre><code>&lt;VariableName&gt; ? call:;\n</code></pre></li> </ul> <p>Example:</p> <ul> <li>Create a function that adds two numbers:   <pre><code>addNumbers # FUNC:RES;\naddNumbers ? ('a' + 'b');\naddNumbers ? call:;\n</code></pre></li> </ul>"},{"location":"Types/05-Functions/#function-vc-coming-soon","title":"Function VC (Coming Soon)","text":"<ul> <li>usage: <pre><code>&lt;VariableName&gt; ? (&lt;equation&gt;);\n</code></pre></li> </ul> <p>Variables are notes as v1, v2, ... changeInternVariables - usage: <pre><code>  &lt;VariableName&gt; ? VC:&lt;v1&gt;|&lt;v2&gt;|...;\n</code></pre></p> <p>Example <pre><code>a # INT:1;\nb # INT:2;\n\na2 # INT:2;\nb2 # INT:3;\n\nfunction # FUNC:VC;\nfunction ? ('v1'+'v2')\n\nfunction ? VC:a|b;\nfunction ? call:;  -&gt; Result == 3\n\nfunction ? VC:a2|b2;\nfunction ? call:;   -&gt; Result == 5\n</code></pre></p>"},{"location":"Types/06-ConditionalObjects/","title":"Conditional Objects","text":"<p>Conditional objects return boolean values (<code>~1</code> for true, <code>~0</code> for false) based on conditions.</p> <p>Declare a Conditional Object:</p> <pre><code>&lt;VariableName&gt; # CO:;\n&lt;VariableName&gt; # CO:(&lt;condition&gt;);\n</code></pre> <ul> <li>Condition Format: <code>(a &gt; b)</code></li> </ul> <p>Example:</p> <ul> <li>Create a condition:   <pre><code>isGreater # CO:('a' &gt; 'b');\n</code></pre></li> </ul>"},{"location":"Types/07-IfStatements/","title":"IF-Statements","text":"<p>If statements are used to add logic to your program.</p> <p>Declare a IF statement <pre><code>statement # IF:&lt;conditionalObjectName&gt;|&lt;commandsInIF&gt;;\n\nstatement ? ELSE:&lt;commandsInIF&gt;;\n\nstatement ? END:;\n</code></pre></p> <p>commandsInIF is the count of commands in IF statement</p> <p>Example: <pre><code>conditionalObject # CO:('a' &gt; 'b')\n\nstatement # IF:conditionalObject|1;\n\n~ A is greater than b\n\nstatement ? ELSE:1;\n~ B is greater than A\n\nstatement ? END:;\n</code></pre></p>"},{"location":"Types/08-Loops/","title":"Loops","text":"<p>Loops in Zephyr allow you to repeat actions.</p> <p>Declare a Loop:</p> <ul> <li> <p>usage: <pre><code>&lt;VariableName&gt; # LOOP:&lt;Conditional Object Name&gt;;\n</code></pre></p> </li> <li> <p>Conditional Object: Controls the loop\u2019s execution based on a boolean condition.</p> </li> </ul> <p>End a Loop:</p> <ul> <li>usage: <pre><code>&lt;VariableName&gt; ? END:;\n</code></pre></li> </ul> <p>Example:</p> <ul> <li>Create a loop that runs while a conditionObject is true:   <pre><code>repeatLoop # LOOP:&lt;conditionalObject&gt;;\nrepeatLoop ? END:;\n</code></pre></li> </ul>"},{"location":"Types/09-RandomNumberGenerator/","title":"Random Number Generator","text":"<ul> <li> <p>usage: <pre><code>&lt;VariableName&gt; # RNG:&lt;Random number type&gt;|&lt;range&gt;;\n</code></pre></p> </li> <li> <p>Range: Format <code>min-&gt;max</code>, inclusive.</p> </li> </ul> <p>Example:</p> <ul> <li>Generate a random number between 0 and 30:   <pre><code>randomValue # RNG:INT|0-&gt;30;\n</code></pre></li> </ul>"},{"location":"Types/09-RandomNumberGenerator/#changing-range","title":"Changing Range","text":"<ul> <li>usage: <pre><code>&lt;VariableName&gt; ? CR:&lt;range&gt;;\n</code></pre></li> </ul>"},{"location":"Types/10-PredefinedVariables/","title":"Predefined Variables","text":"<p>Predefined variables allow you to define variables in a json script and use them in Zephyr.</p> <p>Load Predefined Variables:</p> <pre><code>__ ? predefVars:&lt;filename&gt;;\n</code></pre> <p>Predefined Variable File Structure:</p> <p>The file extension is .zpkg <pre><code>{\n    \"&lt;Variable Name&gt;\": {\n        \"type\": \"&lt;Variable Type&gt;\",\n        \"value\": \"&lt;Variable Value&gt;\",\n        \"const\": false\n    }\n}\n</code></pre> - Place predefined variable files in the <code>lib/</code> directory.</p> <p>!Without Extension! Dump Variables used in code <pre><code>__ ? dumpVars:&lt;filename&gt;;\n</code></pre></p> <p>Example:</p> <pre><code>__ ? predefVars:examplePredefVars;\n__ ? dumpVars:usedVars;\n</code></pre>"},{"location":"Types/11-Files/","title":"Files","text":"<p>Files are used to open Files from the computer to read and write to it.</p> <p>open a file <pre><code>&lt;VariableName&gt; # FILE:&lt;fileName&gt;|~1/~0;\n</code></pre></p> <p>always creates a File if not existent <code>~1</code> -&gt; delete content of file and open for edit &amp; write <code>~0</code> (default) -&gt; open for edit &amp; write</p> <p>Basic actions <pre><code>~ Clear a File\n&lt;VariableName&gt; ? clear:&lt;lineNumber&gt;;\n\n~ Delete File\n&lt;VariableName&gt; ? delete:~0/~1;\n\n~ Rename a File\n&lt;VariableName&gt; ? rename:&lt;newName&gt;|~1/~0;\n\n~ close and repoen a File after editing\n&lt;VariableName&gt; ? close:;\n&lt;VariableName&gt; ? reopen:;\n</code></pre> - clear: <code>&lt;lineNumber&gt;</code> -&gt; optional line Number to clear | Variable name supported in <code>' '</code> - delete: <code>~1</code> -&gt; delete only if empty <code>~0</code> (default) -&gt; force delete - rename: <code>~1</code> -&gt; delete content <code>~0</code> (default) -&gt; keep content</p> <p>Write <pre><code>~ write to a specific Line\n&lt;VariableName&gt; ? w:&lt;pos&gt;|&lt;value&gt;;\n\n~ append to the file\n&lt;VariableName&gt; ? a:&lt;value&gt;;\n\n~ insert to the file\n&lt;VariableName&gt; ? i:&lt;pos&gt;|&lt;value&gt;;\n\n~ replace a file\n&lt;VariableName&gt; ? rep:&lt;listName&gt;|&lt;startingIndex&gt;;\n</code></pre> - write <code>pos</code> can be every number from 1 | INT Variable names supported in <code>' '</code> <code>value</code> can be every char combination except <code>; ' :</code> | PT Variable names supported in <code>' '</code> - append appends always to one after the last line <code>value</code> can be every char combination except <code>; ' :</code> | PT Variable names supported in <code>' '</code> - insert insert a value in a line shifting all values after the pos to the right <code>pos</code> can be every number from 1 | INT Variable names supported in <code>' '</code> <code>value</code> can be every char combination except <code>; ' :</code> | PT Variable names supported in <code>' '</code> - replace replaces an entire File with a List <code>listName</code> -&gt; Name of the list variable in <code>' '</code> <code>startingIndex</code> -&gt; optional starting index to start replacing with a shift | INT Variable name support</p> <p>Read (Coming Soon)</p>"},{"location":"Types/12-Libraries/","title":"Libraries","text":"<p>Libraries in Zephyr allow for the creation of custom functions that extend the language\u2019s capabilities.</p> <p>Declare a Library:</p> <pre><code>&lt;VariableName&gt; # LIB:&lt;library file name&gt;;\n</code></pre> <p>Use a Function from a Library:</p> <pre><code>&lt;VariableName&gt; ? &lt;Function&gt;:&lt;Params&gt;;\n</code></pre>"},{"location":"Types/12-Libraries/#creating-a-library","title":"Creating a Library","text":"<p>File Structure:</p> <ul> <li>Libraries are stored in the <code>lib/</code> directory.</li> </ul> <pre><code>lib/\n\u251c\u2500\u2500 code.zpkg\n\u2514\u2500\u2500 exampleLibrary.py\nmain.py\nfunctions.py\ncode.zsrc\ncode.zph\n</code></pre> <p>Library Code Structure:</p> <ul> <li>A search function is necessary to check if statements can be modified.</li> </ul> <pre><code>def search(name, func, base, paramsList, codeLine):\n    match func:\n        case \"?\":\n            match base:\n                case \"add10\":\n                    vars = add10(vars, vars[paramsList[0]])\n    return vars\n\ndef add10(vars, var):\n    a = int(var.value)\n    b = a + 10\n    var.value = str(b)\n    vars.update({var.name: var})\n    return vars\n</code></pre> <p>Example:</p> <ul> <li>Define a function in a custom library and use it in Zephyr:   <pre><code>myLib # LIB:exampleLibrary;\nmyVar ? add10:myVar;\n</code></pre></li> </ul>"}]}